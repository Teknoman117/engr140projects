#ifndef LA7_Object_h#define LA7_Object_h#include <iostream>#include <string>using namespace std;//Forward declaration of Number and Wordclass Number;class Word;//The Object ADTclass Object {public:    virtual Object* multiply ( const Object* obj ) const = 0;    virtual void print() = 0;    virtual ~Object() {};};//Define your Number and Word classes belowclass Number : public Object{    int value;    public:    explicit Number(int value)    : value(value)    {    }        void print()    {        std::cout << value << std::endl;    }        int& GetValue() {return value;}    const int& GetValueConst() const {return value;}        Object* multiply( const Object* obj ) const;};//Define your Number and Word classes belowclass Word : public Object{    std::string value;    public:    Word(const std::string& value)    : value(value)    {    }        void print()    {        std::cout << value << std::endl;    }        std::string& GetValue() {return value;}    const std::string& GetValueConst() const {return value;}        Object* multiply( const Object* obj ) const;};Object* Number::multiply(const Object* obj) const{    if(typeid(*obj) == typeid(Number))    {        const Number *n = static_cast<const Number *>(obj);        return new Number(n->value * value);    }    else if(typeid(*obj) == typeid(Word))    {        const Word *w = static_cast<const Word *>(obj);                Word *wn = new Word("");        for(int i = 0; i < value; i++)            wn->GetValue() += w->GetValueConst();                return wn;    }        return 0;}Object* Word::multiply(const Object* obj) const{    if(typeid(*obj) == typeid(Number))    {        return obj->multiply(this);    }    else if(typeid(*obj) == typeid(Word))    {        const Word *w = static_cast<const Word *>(obj);        return multiply(new Number(w->value.size()));    }    return 0;}#endif